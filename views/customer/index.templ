package customer

import (
	"fmt"
	"strings"

	"bajscheme/models"
	"bajscheme/views/layout"
)

templ CustomerList(titlePage string,  customers []models.Customer) {
	<div class="flex justify-between max-w-2xl mx-auto border-b border-b-slate-600 mb-8 pb-2">
		<h1 class="text-2xl font-bold text-center">
			{ strings.Trim(titlePage, "| ") }
		</h1>
		<a hx-swap="transition:true" class="btn btn-info p-4 hover:scale-[1.1]" href="/customer/create">
			New
		</a>
	</div>
	<section class="overflow-auto max-w-2xl max-h-96 mx-auto bg-slate-600 rounded-lg shadow-xl">
		<table class="table table-zebra">
			<!-- head -->
			<thead class="bg-slate-700">
				<tr>
					<th></th>
					<th class="text-center">Customer Id</th>
<th class="text-center">Group Id</th>
<th class="text-center">Seller Id</th>
<th class="text-center">Kid</th>
<th class="text-center">Firstname</th>
<th class="text-center">Lastname</th>
<th class="text-center">Position</th>
<th class="text-center">Email</th>
<th class="text-center">Country Code</th>
<th class="text-center">Mobile</th>
<th class="text-center">Company</th>
<th class="text-center">Company Phone</th>
<th class="text-center">Address</th>
<th class="text-center">Location</th>
<th class="text-center">Files</th>
<th class="text-center">Registration</th>
<th class="text-center">Registration Expires</th>
<th class="text-center">Vat</th>
<th class="text-center">Password</th>
<th class="text-center">Newsletter</th>
<th class="text-center">Ip</th>
<th class="text-center">Status</th>
<th class="text-center">Reset Token</th>
<th class="text-center">Reset Expires</th>
<th class="text-center">Otp</th>

					<th class="text-center">Options</th>
				</tr>
			</thead>
			if len(customers) != 0 {
				<tbody>
					for _, customer := range customers {
						<tr>

                            <td>{fmt.Sprintf("%s",customer.CustomerID)} </td>\n<td>{fmt.Sprintf("%s",customer.GroupID)} </td>\n<td>{fmt.Sprintf("%s",customer.SellerID)} </td>\n<td>{fmt.Sprintf("%s",customer.Kid)} </td>\n<td>{fmt.Sprintf("%s",customer.Firstname)} </td>\n<td>{fmt.Sprintf("%s",customer.Lastname)} </td>\n<td>{fmt.Sprintf("%s",customer.Position)} </td>\n<td>{fmt.Sprintf("%s",customer.Email)} </td>\n<td>{fmt.Sprintf("%s",customer.CountryCode)} </td>\n<td>{fmt.Sprintf("%s",customer.Mobile)} </td>\n<td>{fmt.Sprintf("%s",customer.Company)} </td>\n<td>{fmt.Sprintf("%s",customer.CompanyPhone)} </td>\n<td>{fmt.Sprintf("%s",customer.Address)} </td>\n<td>{fmt.Sprintf("%s",customer.Location)} </td>\n<td>{fmt.Sprintf("%s",customer.Files)} </td>\n<td>{fmt.Sprintf("%s",customer.Registration)} </td>\n<td>{fmt.Sprintf("%s",customer.RegistrationExpires)} </td>\n<td>{fmt.Sprintf("%s",customer.Vat)} </td>\n<td>{fmt.Sprintf("%s",customer.Password)} </td>\n<td>{fmt.Sprintf("%s",customer.Newsletter)} </td>\n<td>{fmt.Sprintf("%s",customer.Ip)} </td>\n<td>{fmt.Sprintf("%s",customer.Status)} </td>\n<td>{fmt.Sprintf("%s",customer.ResetToken)} </td>\n<td>{fmt.Sprintf("%s",customer.ResetExpires)} </td>\n<td>{fmt.Sprintf("%s",customer.Otp)} </td>\n
							<td class="flex justify-center gap-2">
								<a
 									hx-swap="transition:true"
 									href={ templ.URL(fmt.Sprintf("/customer/edit/%d", customer.CustomerID)) }
 									class="btn btn-primary p-3 hover:scale-[1.1]"
								>
									Edit
								</a>
								<button
 									hx-swap="transition:true"
 									hx-delete={ fmt.Sprintf("/customer/delete/%d", customer.CustomerID) }
 									hx-confirm={ fmt.Sprintf("Are you sure you want to delete the customer with ID #%d?", customer.CustomerID) }
 									hx-target="body"
 									class="btn btn-error p-3 hover:scale-[1.1]"
								>
									Delete
								</button>
							</td>
						</tr>
					}
				</tbody>
			} else {
				<tbody>
					<tr>
						<td colspan="4" align="center">
							customer is empty
						</td>
					</tr>
				</tbody>
			}
		</table>
	</section>
}

templ CustomerIndex(
    title,
    username string,
    fromProtected bool,
    isError bool,
	errMsgs, sucMsgs []string,
    cmp templ.Component,
    ) {
	@layout.Base(title, username, fromProtected, isError, errMsgs, sucMsgs) {
		@cmp
	}
}
